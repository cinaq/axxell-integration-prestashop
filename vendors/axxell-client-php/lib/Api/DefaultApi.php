<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Axxell
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Axxell\Api;

use \Axxell\Configuration;
use \Axxell\ApiClient;
use \Axxell\ApiException;
use \Axxell\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Axxell
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     * @var \Axxell\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Axxell\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/v1/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Axxell\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Axxell\ApiClient $apiClient set the API client
     * @return DefaultApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * aggregateCountEvents
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @param string $data_period Valid values are last7days, last30days, today, yesterday (required)
     * @return \Axxell\Model\DataPoint
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateCountEvents($storeid, $event_type, $data_period)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregateCountEventsWithHttpInfo ($storeid, $event_type, $data_period);
        return $response; 
    }


    /**
     * aggregateCountEventsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @param string $data_period Valid values are last7days, last30days, today, yesterday (required)
     * @return Array of \Axxell\Model\DataPoint, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateCountEventsWithHttpInfo($storeid, $event_type, $data_period)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling aggregateCountEvents');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling aggregateCountEvents');
        }
        // verify the required parameter 'data_period' is set
        if ($data_period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_period when calling aggregateCountEvents');
        }
  
        // parse inputs
        $resourcePath = "/aggregates/countevents/{eventType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }// query params
        
        if ($data_period !== null) {
            $queryParams['dataPeriod'] = $this->apiClient->getSerializer()->toQueryValue($data_period);
        }
        
        // path params
        
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\DataPoint'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\DataPoint', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\DataPoint', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregateEffective
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return \Axxell\Model\DataPoint[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateEffective($storeid, $event_type)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregateEffectiveWithHttpInfo ($storeid, $event_type);
        return $response; 
    }


    /**
     * aggregateEffectiveWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return Array of \Axxell\Model\DataPoint[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateEffectiveWithHttpInfo($storeid, $event_type)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling aggregateEffective');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling aggregateEffective');
        }
  
        // parse inputs
        $resourcePath = "/aggregates/effective/{eventType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        // path params
        
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\DataPoint[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\DataPoint[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\DataPoint[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregateEvents
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return \Axxell\Model\DataPoint[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateEvents($storeid, $event_type)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregateEventsWithHttpInfo ($storeid, $event_type);
        return $response; 
    }


    /**
     * aggregateEventsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return Array of \Axxell\Model\DataPoint[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateEventsWithHttpInfo($storeid, $event_type)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling aggregateEvents');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling aggregateEvents');
        }
  
        // parse inputs
        $resourcePath = "/aggregates/events/{eventType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        // path params
        
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\DataPoint[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\DataPoint[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\DataPoint[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregateRecent
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return \Axxell\Model\Item[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateRecent($storeid, $event_type)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregateRecentWithHttpInfo ($storeid, $event_type);
        return $response; 
    }


    /**
     * aggregateRecentWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return Array of \Axxell\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateRecentWithHttpInfo($storeid, $event_type)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling aggregateRecent');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling aggregateRecent');
        }
  
        // parse inputs
        $resourcePath = "/aggregates/recent/{eventType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        // path params
        
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregateTop
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return \Axxell\Model\Item[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateTop($storeid, $event_type)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregateTopWithHttpInfo ($storeid, $event_type);
        return $response; 
    }


    /**
     * aggregateTopWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $event_type Valid values purchase, view or recommend (required)
     * @return Array of \Axxell\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function aggregateTopWithHttpInfo($storeid, $event_type)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling aggregateTop');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling aggregateTop');
        }
  
        // parse inputs
        $resourcePath = "/aggregates/top/{eventType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        // path params
        
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * authStore
     *
     * 
     *
     * @param \Axxell\Model\Store $store Store (required)
     * @return \Axxell\Model\Store
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function authStore($store)
    {
        list($response, $statusCode, $httpHeader) = $this->authStoreWithHttpInfo ($store);
        return $response; 
    }


    /**
     * authStoreWithHttpInfo
     *
     * 
     *
     * @param \Axxell\Model\Store $store Store (required)
     * @return Array of \Axxell\Model\Store, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function authStoreWithHttpInfo($store)
    {
        
        // verify the required parameter 'store' is set
        if ($store === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store when calling authStore');
        }
  
        // parse inputs
        $resourcePath = "/auth";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($store)) {
            $_tempBody = $store;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Store'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Store', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Store', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * retrieveEvents
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return \Axxell\Model\Event[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function retrieveEvents($storeid)
    {
        list($response, $statusCode, $httpHeader) = $this->retrieveEventsWithHttpInfo ($storeid);
        return $response; 
    }


    /**
     * retrieveEventsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return Array of \Axxell\Model\Event[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function retrieveEventsWithHttpInfo($storeid)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling retrieveEvents');
        }
  
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($storeid !== null) {
            $resourcePath = str_replace(
                "{" . "storeid" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Event[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Event[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Event[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * registerEvent
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param \Axxell\Model\Event $event Single event to register (required)
     * @return \Axxell\Model\Event
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerEvent($storeid, $event)
    {
        list($response, $statusCode, $httpHeader) = $this->registerEventWithHttpInfo ($storeid, $event);
        return $response; 
    }


    /**
     * registerEventWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param \Axxell\Model\Event $event Single event to register (required)
     * @return Array of \Axxell\Model\Event, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerEventWithHttpInfo($storeid, $event)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling registerEvent');
        }
        // verify the required parameter 'event' is set
        if ($event === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event when calling registerEvent');
        }
  
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($event)) {
            $_tempBody = $event;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Event'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Event', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Event', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAllEvents
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return \Axxell\Model\Event
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteAllEvents($storeid)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAllEventsWithHttpInfo ($storeid);
        return $response; 
    }


    /**
     * deleteAllEventsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return Array of \Axxell\Model\Event, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteAllEventsWithHttpInfo($storeid)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling deleteAllEvents');
        }
  
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Event'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Event', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Event', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * retrieveItems
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return \Axxell\Model\Item[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function retrieveItems($storeid)
    {
        list($response, $statusCode, $httpHeader) = $this->retrieveItemsWithHttpInfo ($storeid);
        return $response; 
    }


    /**
     * retrieveItemsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return Array of \Axxell\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function retrieveItemsWithHttpInfo($storeid)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling retrieveItems');
        }
  
        // parse inputs
        $resourcePath = "/items";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * registerItem
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param \Axxell\Model\Item $item Single item to register (required)
     * @return \Axxell\Model\Item
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerItem($storeid, $item)
    {
        list($response, $statusCode, $httpHeader) = $this->registerItemWithHttpInfo ($storeid, $item);
        return $response; 
    }


    /**
     * registerItemWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param \Axxell\Model\Item $item Single item to register (required)
     * @return Array of \Axxell\Model\Item, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerItemWithHttpInfo($storeid, $item)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling registerItem');
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item when calling registerItem');
        }
  
        // parse inputs
        $resourcePath = "/items";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($item)) {
            $_tempBody = $item;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAllItems
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return \Axxell\Model\Item
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteAllItems($storeid)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAllItemsWithHttpInfo ($storeid);
        return $response; 
    }


    /**
     * deleteAllItemsWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @return Array of \Axxell\Model\Item, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteAllItemsWithHttpInfo($storeid)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling deleteAllItems');
        }
  
        // parse inputs
        $resourcePath = "/items";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteItem
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $itemid Item identifier (required)
     * @return \Axxell\Model\Item
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteItem($storeid, $itemid)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteItemWithHttpInfo ($storeid, $itemid);
        return $response; 
    }


    /**
     * deleteItemWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $itemid Item identifier (required)
     * @return Array of \Axxell\Model\Item, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function deleteItemWithHttpInfo($storeid, $itemid)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling deleteItem');
        }
        // verify the required parameter 'itemid' is set
        if ($itemid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $itemid when calling deleteItem');
        }
  
        // parse inputs
        $resourcePath = "/items/{itemid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }
        
        // path params
        
        if ($itemid !== null) {
            $resourcePath = str_replace(
                "{" . "itemid" . "}",
                $this->apiClient->getSerializer()->toPathValue($itemid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * recommendInteresting
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $userid Interesting items for visitor (required)
     * @param double $count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return \Axxell\Model\Item[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function recommendInteresting($storeid, $userid, $count = null)
    {
        list($response, $statusCode, $httpHeader) = $this->recommendInterestingWithHttpInfo ($storeid, $userid, $count);
        return $response; 
    }


    /**
     * recommendInterestingWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $userid Interesting items for visitor (required)
     * @param double $count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return Array of \Axxell\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function recommendInterestingWithHttpInfo($storeid, $userid, $count = null)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling recommendInteresting');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling recommendInteresting');
        }
  
        // parse inputs
        $resourcePath = "/recommendations/interesting";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }// query params
        
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }// query params
        
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * recommendSimilar
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $userid User requesting the recommendation (required)
     * @param string $itemid Similar items bought by others (required)
     * @param double $count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return \Axxell\Model\Item[]
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function recommendSimilar($storeid, $userid, $itemid, $count = null)
    {
        list($response, $statusCode, $httpHeader) = $this->recommendSimilarWithHttpInfo ($storeid, $userid, $itemid, $count);
        return $response; 
    }


    /**
     * recommendSimilarWithHttpInfo
     *
     * 
     *
     * @param string $storeid Store identifier (required)
     * @param string $userid User requesting the recommendation (required)
     * @param string $itemid Similar items bought by others (required)
     * @param double $count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return Array of \Axxell\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function recommendSimilarWithHttpInfo($storeid, $userid, $itemid, $count = null)
    {
        
        // verify the required parameter 'storeid' is set
        if ($storeid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeid when calling recommendSimilar');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling recommendSimilar');
        }
        // verify the required parameter 'itemid' is set
        if ($itemid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $itemid when calling recommendSimilar');
        }
  
        // parse inputs
        $resourcePath = "/recommendations/similar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($storeid !== null) {
            $queryParams['storeid'] = $this->apiClient->getSerializer()->toQueryValue($storeid);
        }// query params
        
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }// query params
        
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }// query params
        
        if ($itemid !== null) {
            $queryParams['itemid'] = $this->apiClient->getSerializer()->toQueryValue($itemid);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Item[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Item[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * registerStore
     *
     * 
     *
     * @param \Axxell\Model\Store $store Store (required)
     * @return \Axxell\Model\Store
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerStore($store)
    {
        list($response, $statusCode, $httpHeader) = $this->registerStoreWithHttpInfo ($store);
        return $response; 
    }


    /**
     * registerStoreWithHttpInfo
     *
     * 
     *
     * @param \Axxell\Model\Store $store Store (required)
     * @return Array of \Axxell\Model\Store, HTTP status code, HTTP response headers (array of strings)
     * @throws \Axxell\ApiException on non-2xx response
     */
    public function registerStoreWithHttpInfo($store)
    {
        
        // verify the required parameter 'store' is set
        if ($store === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store when calling registerStore');
        }
  
        // parse inputs
        $resourcePath = "/store";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($store)) {
            $_tempBody = $store;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Axxell\Model\Store'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Axxell\ObjectSerializer::deserialize($response, '\Axxell\Model\Store', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\Store', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Axxell\ObjectSerializer::deserialize($e->getResponseBody(), '\Axxell\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
