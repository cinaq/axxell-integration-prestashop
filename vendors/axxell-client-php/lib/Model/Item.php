<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axxell
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Axxell\Model;

use \ArrayAccess;
/**
 * Item Class Doc Comment
 *
 * @category    Class
 * @description An item is often equivalent to a product or service in your store
 * @package     Axxell
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Item implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'creation_time' => 'string',
        'item_id' => 'string',
        'gid' => 'string',
        'title' => 'string',
        'label' => 'string',
        'categories' => 'string[]',
        'url' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'creation_time' => 'creationTime',
        'item_id' => 'itemId',
        'gid' => 'gid',
        'title' => 'title',
        'label' => 'label',
        'categories' => 'categories',
        'url' => 'url'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'creation_time' => 'setCreationTime',
        'item_id' => 'setItemId',
        'gid' => 'setGid',
        'title' => 'setTitle',
        'label' => 'setLabel',
        'categories' => 'setCategories',
        'url' => 'setUrl'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'creation_time' => 'getCreationTime',
        'item_id' => 'getItemId',
        'gid' => 'getGid',
        'title' => 'getTitle',
        'label' => 'getLabel',
        'categories' => 'getCategories',
        'url' => 'getUrl'
    );
  
    
    /**
      * $creation_time Read-only
      * @var string
      */
    protected $creation_time;
    
    /**
      * $item_id This must be your product id used by your own store
      * @var string
      */
    protected $item_id;
    
    /**
      * $gid Global identifier of this item/product. Read-only
      * @var string
      */
    protected $gid;
    
    /**
      * $title Human readable title of the item/product
      * @var string
      */
    protected $title;
    
    /**
      * $label Sanitized version of title. Read-only
      * @var string
      */
    protected $label;
    
    /**
      * $categories Categories this item belongs to. List of keywords describing the item is also acceptable here.
      * @var string[]
      */
    protected $categories;
    
    /**
      * $url Full URL that links to the product. e.g. http://yourshop.com/product/123
      * @var string
      */
    protected $url;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->creation_time = $data["creation_time"];
            $this->item_id = $data["item_id"];
            $this->gid = $data["gid"];
            $this->title = $data["title"];
            $this->label = $data["label"];
            $this->categories = $data["categories"];
            $this->url = $data["url"];
        }
    }
    
    /**
     * Gets creation_time
     * @return string
     */
    public function getCreationTime()
    {
        return $this->creation_time;
    }
  
    /**
     * Sets creation_time
     * @param string $creation_time Read-only
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        
        $this->creation_time = $creation_time;
        return $this;
    }
    
    /**
     * Gets item_id
     * @return string
     */
    public function getItemId()
    {
        return $this->item_id;
    }
  
    /**
     * Sets item_id
     * @param string $item_id This must be your product id used by your own store
     * @return $this
     */
    public function setItemId($item_id)
    {
        
        $this->item_id = $item_id;
        return $this;
    }
    
    /**
     * Gets gid
     * @return string
     */
    public function getGid()
    {
        return $this->gid;
    }
  
    /**
     * Sets gid
     * @param string $gid Global identifier of this item/product. Read-only
     * @return $this
     */
    public function setGid($gid)
    {
        
        $this->gid = $gid;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title Human readable title of the item/product
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }
  
    /**
     * Sets label
     * @param string $label Sanitized version of title. Read-only
     * @return $this
     */
    public function setLabel($label)
    {
        
        $this->label = $label;
        return $this;
    }
    
    /**
     * Gets categories
     * @return string[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
  
    /**
     * Sets categories
     * @param string[] $categories Categories this item belongs to. List of keywords describing the item is also acceptable here.
     * @return $this
     */
    public function setCategories($categories)
    {
        
        $this->categories = $categories;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url Full URL that links to the product. e.g. http://yourshop.com/product/123
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
