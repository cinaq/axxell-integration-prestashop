<?php
/**
 * Store
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axxell
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Axxell\Model;

use \ArrayAccess;
/**
 * Store Class Doc Comment
 *
 * @category    Class
 * @description A store is equivalent to an user account
 * @package     Axxell
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Store implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'email' => 'string',
        'api_key' => 'string',
        'password' => 'string',
        'salt' => 'string',
        'store_id' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'email' => 'email',
        'api_key' => 'apiKey',
        'password' => 'password',
        'salt' => 'salt',
        'store_id' => 'storeId'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'email' => 'setEmail',
        'api_key' => 'setApiKey',
        'password' => 'setPassword',
        'salt' => 'setSalt',
        'store_id' => 'setStoreId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'email' => 'getEmail',
        'api_key' => 'getApiKey',
        'password' => 'getPassword',
        'salt' => 'getSalt',
        'store_id' => 'getStoreId'
    );
  
    
    /**
      * $email Username/email used to login. Set this during registration.
      * @var string
      */
    protected $email;
    
    /**
      * $api_key Also known as secret key. Read-only
      * @var string
      */
    protected $api_key;
    
    /**
      * $password The password required to login. Set this during registration.
      * @var string
      */
    protected $password;
    
    /**
      * $salt Internal use
      * @var string
      */
    protected $salt;
    
    /**
      * $store_id Also known as access key. Read-only
      * @var string
      */
    protected $store_id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->email = $data["email"];
            $this->api_key = $data["api_key"];
            $this->password = $data["password"];
            $this->salt = $data["salt"];
            $this->store_id = $data["store_id"];
        }
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Username/email used to login. Set this during registration.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets api_key
     * @return string
     */
    public function getApiKey()
    {
        return $this->api_key;
    }
  
    /**
     * Sets api_key
     * @param string $api_key Also known as secret key. Read-only
     * @return $this
     */
    public function setApiKey($api_key)
    {
        
        $this->api_key = $api_key;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password The password required to login. Set this during registration.
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets salt
     * @return string
     */
    public function getSalt()
    {
        return $this->salt;
    }
  
    /**
     * Sets salt
     * @param string $salt Internal use
     * @return $this
     */
    public function setSalt($salt)
    {
        
        $this->salt = $salt;
        return $this;
    }
    
    /**
     * Gets store_id
     * @return string
     */
    public function getStoreId()
    {
        return $this->store_id;
    }
  
    /**
     * Sets store_id
     * @param string $store_id Also known as access key. Read-only
     * @return $this
     */
    public function setStoreId($store_id)
    {
        
        $this->store_id = $store_id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
